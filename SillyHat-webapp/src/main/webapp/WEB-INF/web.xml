<?xml version="1.0" encoding="utf-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <display-name>SillyHatStripe</display-name>

    <!-- 设置Request和Response的字符编码的filter Begin -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <!-- 设置Request请求的字符集编码格式 -->
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <!-- true:强制Response字符集编码和Request请求的编码一致，false的话采用Response默认编码 -->
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!-- 设置Request和Response的字符编码的filter End -->

    <!-- Get请求的数据进行编码转换filter Begin -->
    <filter>
        <filter-name>encodingConvertFilter</filter-name>
        <filter-class>com.sillyhat.springmvc.core.filter.EncodingConvertFilter</filter-class>
        <init-param>
            <param-name>fromEncoding</param-name>
            <param-value>ISO-8859-1</param-value>
        </init-param>
        <init-param>
            <param-name>toEncoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <!-- Get请求的数据进行编码转换filter End -->

    <!-- 简化身份验证和授权filter Begin -->
    <!--<filter>-->
    <!--<filter-name>shiroFilter</filter-name>-->
    <!--<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>-->
    <!--</filter>-->
    <!-- 简化身份验证和授权filter End -->

    <!-- 页面传输压缩过滤器 -->
    <filter>
        <filter-name>compressingFilter</filter-name>
        <filter-class>com.planetj.servlet.filter.compression.CompressingFilter</filter-class>
        <init-param>
            <param-name>compressionThreshold</param-name>
            <!-- 单位为：byte-->
            <param-value>1024</param-value>
        </init-param>
        <init-param>
            <param-name>statsEnabled</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>excludePathPatterns</param-name>
            <!--过滤指定的目录 -->
            <param-value>.*/swagger/.*</param-value>
        </init-param>
        <init-param>
            <param-name>javaUtilLogger</param-name>
            <param-value>java.util.logging.Logger</param-value>
        </init-param>
    </filter>

    <!-- #################################分隔符 ############################################## -->

    <!-- ******************  页面缓存Filter  *****************-->
    <filter-mapping>
        <filter-name>compressingFilter</filter-name>
        <url-pattern>*.css</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>compressingFilter</filter-name>
        <url-pattern>*.js</url-pattern>
    </filter-mapping>

    <!-- #################################分隔符 ############################################## -->

    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter-mapping>
        <filter-name>encodingConvertFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Spring容器加载上下文配置文件的位置 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:/applicationContext.xml
        </param-value>
    </context-param>

    <!-- #################################分隔符 ############################################## -->
    <!--
    1.此监听器主要用于解决java.beans.Introspector导致的内存泄漏的问题
    2.此监听器应该配置在web.xml中与Spring相关监听器中的第一个位置(也要在ContextLoaderListener的前面)
    3.JDK中的java.beans.Introspector类的用途是发现Java类是否符合JavaBean规范,如果有的框架或程序用到了Introspector类,那么就会启用一个系统级别的缓存,此缓存会
　    存放一些曾加载并分析过的JavaBean的引用。当Web服务器关闭时,由于此缓存中存放着这些JavaBean的引用,所以垃圾回收器无法回收Web容器中的JavaBean对象,最后导致
     内存变大。而org.springframework.web.util.IntrospectorCleanupListener就是专门用来处理Introspector内存泄漏问题的辅助类。IntrospectorCleanupListener会在
     Web服务器停止时清理Introspector缓存,使那些Javabean能被垃圾回收器正确回收。Spring自身不会出现这种问题，因为Spring在加载并分析完一个类之后会马上刷新
     JavaBeans Introspector缓存,这就保证Spring中不会出现这种内存泄漏的问题。但有些程序和框架在使用了JavaBeans Introspector之后,没有进行清理工作(如Quartz,Struts),
     最后导致内存泄漏
    -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>
    <!-- 启动spring容器的监听器-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <!-- 指明了配置文件的文件名,不使用默认配置文件名,而使用applicationContext-mvc.xml配置文件.多个值用逗号分隔-->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:/applicationContext-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>


    <!-- 设置session失效，单位:分 -->
    <session-config>
        <session-timeout>5</session-timeout>
    </session-config>

    <welcome-file-list>
        <welcome-file>index.ftl</welcome-file>
    </welcome-file-list>
</web-app>